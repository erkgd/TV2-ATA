{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/users`;\n    this.tokenKey = 'auth_token';\n  }\n  register(username, password) {\n    return this.http.post(`${this.apiUrl}/register`, {\n      username,\n      password\n    });\n  }\n  login(username, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      username,\n      password\n    });\n  }\n  logout() {\n    localStorage.removeItem(this.tokenKey);\n  }\n  getProfile() {\n    return this.http.get(`${this.apiUrl}/profile`);\n  }\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  saveToken(token) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n  getCurrentUser() {\n    const token = this.getToken();\n    if (!token) return null;\n    try {\n      // Decode JWT token (simplified approach, you might want to use a library)\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const payload = JSON.parse(window.atob(base64));\n      return {\n        id: payload.id,\n        username: payload.username\n      };\n    } catch (e) {\n      console.error('Error decoding token:', e);\n      return null;\n    }\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","AuthService","constructor","http","apiUrl","tokenKey","register","username","password","post","login","logout","localStorage","removeItem","getProfile","get","getToken","getItem","saveToken","token","setItem","isLoggedIn","getCurrentUser","base64Url","split","base64","replace","payload","JSON","parse","window","atob","id","e","console","error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\aleja\\Desktop\\BINFO\\ATA\\image-crawler\\angular-image-scraper\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { AuthResponse, User } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = `${environment.apiUrl}/users`;\r\n  private tokenKey = 'auth_token';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  register(username: string, password: string): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/register`, { username, password });\r\n  }\r\n\r\n  login(username: string, password: string): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, { username, password });\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem(this.tokenKey);\r\n  }\r\n\r\n  getProfile(): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/profile`);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem(this.tokenKey);\r\n  }\r\n\r\n  saveToken(token: string): void {\r\n    localStorage.setItem(this.tokenKey, token);\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return !!this.getToken();\r\n  }\r\n\r\n  getCurrentUser(): User | null {\r\n    const token = this.getToken();\r\n    if (!token) return null;\r\n\r\n    try {\r\n      // Decode JWT token (simplified approach, you might want to use a library)\r\n      const base64Url = token.split('.')[1];\r\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n      const payload = JSON.parse(window.atob(base64));\r\n      \r\n      return {\r\n        id: payload.id,\r\n        username: payload.username\r\n      };\r\n    } catch (e) {\r\n      console.error('Error decoding token:', e);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAASA,WAAW,QAAQ,gCAAgC;;;AAM5D,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,MAAM,GAAG,GAAGJ,WAAW,CAACI,MAAM,QAAQ;IACtC,KAAAC,QAAQ,GAAG,YAAY;EAES;EAExCC,QAAQA,CAACC,QAAgB,EAAEC,QAAgB;IACzC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAe,GAAG,IAAI,CAACL,MAAM,WAAW,EAAE;MAAEG,QAAQ;MAAEC;IAAQ,CAAE,CAAC;EACxF;EAEAE,KAAKA,CAACH,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAe,GAAG,IAAI,CAACL,MAAM,QAAQ,EAAE;MAAEG,QAAQ;MAAEC;IAAQ,CAAE,CAAC;EACrF;EAEAG,MAAMA,CAAA;IACJC,YAAY,CAACC,UAAU,CAAC,IAAI,CAACR,QAAQ,CAAC;EACxC;EAEAS,UAAUA,CAAA;IACR,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAM,GAAG,IAAI,CAACX,MAAM,UAAU,CAAC;EACrD;EAEAY,QAAQA,CAAA;IACN,OAAOJ,YAAY,CAACK,OAAO,CAAC,IAAI,CAACZ,QAAQ,CAAC;EAC5C;EAEAa,SAASA,CAACC,KAAa;IACrBP,YAAY,CAACQ,OAAO,CAAC,IAAI,CAACf,QAAQ,EAAEc,KAAK,CAAC;EAC5C;EAEAE,UAAUA,CAAA;IACR,OAAO,CAAC,CAAC,IAAI,CAACL,QAAQ,EAAE;EAC1B;EAEAM,cAAcA,CAAA;IACZ,MAAMH,KAAK,GAAG,IAAI,CAACH,QAAQ,EAAE;IAC7B,IAAI,CAACG,KAAK,EAAE,OAAO,IAAI;IAEvB,IAAI;MACF;MACA,MAAMI,SAAS,GAAGJ,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACrC,MAAMC,MAAM,GAAGF,SAAS,CAACG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;MAC9D,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,MAAM,CAACC,IAAI,CAACN,MAAM,CAAC,CAAC;MAE/C,OAAO;QACLO,EAAE,EAAEL,OAAO,CAACK,EAAE;QACdzB,QAAQ,EAAEoB,OAAO,CAACpB;OACnB;KACF,CAAC,OAAO0B,CAAC,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,CAAC,CAAC;MACzC,OAAO,IAAI;;EAEf;;;uBApDWhC,WAAW,EAAAmC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXtC,WAAW;MAAAuC,OAAA,EAAXvC,WAAW,CAAAwC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}