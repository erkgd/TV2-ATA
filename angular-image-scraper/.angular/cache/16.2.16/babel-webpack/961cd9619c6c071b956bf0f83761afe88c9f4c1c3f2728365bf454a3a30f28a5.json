{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SearchService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/search`;\n  }\n  searchImages(query, copyrightFilter, transparentOnly, useApi, maxResults = 20) {\n    let params = new HttpParams().set('query', query).set('maxResults', maxResults.toString());\n    if (copyrightFilter) {\n      params = params.set('copyrightFilter', copyrightFilter);\n    }\n    if (transparentOnly !== undefined) {\n      params = params.set('transparentOnly', transparentOnly.toString());\n    }\n    if (useApi !== undefined) {\n      params = params.set('useApi', useApi.toString());\n    }\n    return this.http.get(this.apiUrl, {\n      params\n    });\n  }\n  getSearchOptions() {\n    return this.http.get(`${this.apiUrl}/options`);\n  }\n  getSearchHistory() {\n    return this.http.get(`${this.apiUrl}/history`);\n  }\n  advancedSearch(params) {\n    return this.http.post(`${this.apiUrl}/advanced`, params);\n  }\n  static {\n    this.ɵfac = function SearchService_Factory(t) {\n      return new (t || SearchService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SearchService,\n      factory: SearchService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","environment","SearchService","constructor","http","apiUrl","searchImages","query","copyrightFilter","transparentOnly","useApi","maxResults","params","set","toString","undefined","get","getSearchOptions","getSearchHistory","advancedSearch","post","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\aleja\\Desktop\\BINFO\\ATA\\image-crawler\\angular-image-scraper\\src\\app\\services\\search.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { Image, SearchHistory } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SearchService {\r\n  private apiUrl = `${environment.apiUrl}/search`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  searchImages(\r\n    query: string, \r\n    copyrightFilter?: string, \r\n    transparentOnly?: boolean,\r\n    useApi?: boolean,\r\n    maxResults: number = 20\r\n  ): Observable<Image[]> {\r\n    let params = new HttpParams()\r\n      .set('query', query)\r\n      .set('maxResults', maxResults.toString());\r\n    \r\n    if (copyrightFilter) {\r\n      params = params.set('copyrightFilter', copyrightFilter);\r\n    }\r\n    \r\n    if (transparentOnly !== undefined) {\r\n      params = params.set('transparentOnly', transparentOnly.toString());\r\n    }\r\n    \r\n    if (useApi !== undefined) {\r\n      params = params.set('useApi', useApi.toString());\r\n    }\r\n    \r\n    return this.http.get<Image[]>(this.apiUrl, { params });\r\n  }\r\n\r\n  getSearchOptions(): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/options`);\r\n  }\r\n\r\n  getSearchHistory(): Observable<SearchHistory[]> {\r\n    return this.http.get<SearchHistory[]>(`${this.apiUrl}/history`);\r\n  }\r\n\r\n  advancedSearch(params: any): Observable<Image[]> {\r\n    return this.http.post<Image[]>(`${this.apiUrl}/advanced`, params);\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAE7D,SAASC,WAAW,QAAQ,gCAAgC;;;AAM5D,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,GAAGJ,WAAW,CAACI,MAAM,SAAS;EAEP;EAExCC,YAAYA,CACVC,KAAa,EACbC,eAAwB,EACxBC,eAAyB,EACzBC,MAAgB,EAChBC,UAAA,GAAqB,EAAE;IAEvB,IAAIC,MAAM,GAAG,IAAIZ,UAAU,EAAE,CAC1Ba,GAAG,CAAC,OAAO,EAAEN,KAAK,CAAC,CACnBM,GAAG,CAAC,YAAY,EAAEF,UAAU,CAACG,QAAQ,EAAE,CAAC;IAE3C,IAAIN,eAAe,EAAE;MACnBI,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,iBAAiB,EAAEL,eAAe,CAAC;;IAGzD,IAAIC,eAAe,KAAKM,SAAS,EAAE;MACjCH,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,iBAAiB,EAAEJ,eAAe,CAACK,QAAQ,EAAE,CAAC;;IAGpE,IAAIJ,MAAM,KAAKK,SAAS,EAAE;MACxBH,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAACI,QAAQ,EAAE,CAAC;;IAGlD,OAAO,IAAI,CAACV,IAAI,CAACY,GAAG,CAAU,IAAI,CAACX,MAAM,EAAE;MAAEO;IAAM,CAAE,CAAC;EACxD;EAEAK,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACb,IAAI,CAACY,GAAG,CAAM,GAAG,IAAI,CAACX,MAAM,UAAU,CAAC;EACrD;EAEAa,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACd,IAAI,CAACY,GAAG,CAAkB,GAAG,IAAI,CAACX,MAAM,UAAU,CAAC;EACjE;EAEAc,cAAcA,CAACP,MAAW;IACxB,OAAO,IAAI,CAACR,IAAI,CAACgB,IAAI,CAAU,GAAG,IAAI,CAACf,MAAM,WAAW,EAAEO,MAAM,CAAC;EACnE;;;uBAzCWV,aAAa,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAbtB,aAAa;MAAAuB,OAAA,EAAbvB,aAAa,CAAAwB,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}