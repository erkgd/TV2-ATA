{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CsrfInterceptor {\n  constructor(tokenExtractor) {\n    this.tokenExtractor = tokenExtractor;\n  }\n  intercept(request, next) {\n    // Django uses 'csrftoken' as the cookie name\n    const csrfToken = this.tokenExtractor.getToken();\n    if (csrfToken !== null && !request.headers.has('X-CSRFToken')) {\n      request = request.clone({\n        headers: request.headers.set('X-CSRFToken', csrfToken)\n      });\n    }\n    return next.handle(request);\n  }\n  static {\n    this.ɵfac = function CsrfInterceptor_Factory(t) {\n      return new (t || CsrfInterceptor)(i0.ɵɵinject(i1.HttpXsrfTokenExtractor));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CsrfInterceptor,\n      factory: CsrfInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["CsrfInterceptor","constructor","tokenExtractor","intercept","request","next","csrfToken","getToken","headers","has","clone","set","handle","i0","ɵɵinject","i1","HttpXsrfTokenExtractor","factory","ɵfac"],"sources":["C:\\Users\\aleja\\Desktop\\BINFO\\ATA\\image-crawler\\angular-image-scraper\\src\\app\\interceptors\\csrf.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpXsrfTokenExtractor\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class CsrfInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private tokenExtractor: HttpXsrfTokenExtractor) {}\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    // Django uses 'csrftoken' as the cookie name\r\n    const csrfToken = this.tokenExtractor.getToken() as string;\r\n    \r\n    if (csrfToken !== null && !request.headers.has('X-CSRFToken')) {\r\n      request = request.clone({\r\n        headers: request.headers.set('X-CSRFToken', csrfToken)\r\n      });\r\n    }\r\n    \r\n    return next.handle(request);\r\n  }\r\n}\r\n"],"mappings":";;AAWA,OAAM,MAAOA,eAAe;EAE1BC,YAAoBC,cAAsC;IAAtC,KAAAA,cAAc,GAAdA,cAAc;EAA2B;EAE7DC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD;IACA,MAAMC,SAAS,GAAG,IAAI,CAACJ,cAAc,CAACK,QAAQ,EAAY;IAE1D,IAAID,SAAS,KAAK,IAAI,IAAI,CAACF,OAAO,CAACI,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC,EAAE;MAC7DL,OAAO,GAAGA,OAAO,CAACM,KAAK,CAAC;QACtBF,OAAO,EAAEJ,OAAO,CAACI,OAAO,CAACG,GAAG,CAAC,aAAa,EAAEL,SAAS;OACtD,CAAC;;IAGJ,OAAOD,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;EAC7B;;;uBAfWJ,eAAe,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,sBAAA;IAAA;EAAA;;;aAAfhB,eAAe;MAAAiB,OAAA,EAAfjB,eAAe,CAAAkB;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}