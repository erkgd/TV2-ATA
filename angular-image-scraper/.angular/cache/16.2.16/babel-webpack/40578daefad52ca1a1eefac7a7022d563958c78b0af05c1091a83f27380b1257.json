{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ImageService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/images`;\n  }\n  getAllImages(page = 1, limit = 20) {\n    const params = new HttpParams().set('page', page.toString()).set('limit', limit.toString());\n    return this.http.get(this.apiUrl + '/', {\n      params\n    }).pipe(map(resp => ({\n      items: resp.items.map(item => ({\n        // normalize snake_case and camelCase\n        id: String(item.id ?? item._id),\n        title: item.title,\n        url: item.url,\n        sourceUrl: item.source_url ?? item.sourceUrl,\n        thumbnailUrl: item.thumbnail_url ?? item.thumbnailUrl,\n        isTransparent: item.is_transparent ?? item.isTransparent,\n        copyrightStatus: item.copyright_status ?? item.copyrightStatus,\n        width: item.width,\n        height: item.height,\n        fileSize: item.file_size ?? item.fileSize,\n        fileType: item.file_type ?? item.fileType,\n        createdAt: item.created_at ?? item.createdAt,\n        likesCount: item.likes_count ?? item.likesCount ?? 0,\n        commentsCount: item.comments_count ?? item.commentsCount ?? 0\n      })),\n      pagination: resp.pagination\n    })));\n  }\n  getImageById(id) {\n    return this.http.get(`${this.apiUrl}/${id}/`).pipe(map(item => ({\n      id: String(item.id ?? item._id),\n      title: item.title,\n      url: item.url,\n      sourceUrl: item.source_url ?? item.sourceUrl,\n      thumbnailUrl: item.thumbnail_url ?? item.thumbnailUrl,\n      isTransparent: item.is_transparent ?? item.isTransparent,\n      copyrightStatus: item.copyright_status ?? item.copyrightStatus,\n      width: item.width,\n      height: item.height,\n      fileSize: item.file_size ?? item.fileSize,\n      fileType: item.file_type ?? item.fileType,\n      createdAt: item.created_at ?? item.createdAt,\n      likesCount: item.likes_count ?? item.likesCount ?? 0,\n      commentsCount: item.comments_count ?? item.commentsCount ?? item.comments?.length ?? 0,\n      userLiked: item.user_liked ?? item.userLiked ?? false,\n      comments: item.comments || [],\n      similarImages: item.similar_images ?? item.similarImages ?? []\n    })));\n  }\n  createImage(image) {\n    return this.http.post(this.apiUrl, image);\n  }\n  updateImage(id, image) {\n    return this.http.put(`${this.apiUrl}/${id}/`, image);\n  }\n  deleteImage(id) {\n    return this.http.delete(`${this.apiUrl}/${id}/`);\n  }\n  likeImage(id) {\n    return this.http.post(`${this.apiUrl}/${id}/like/`, {});\n  }\n  unlikeImage(id) {\n    return this.http.delete(`${this.apiUrl}/${id}/like/`);\n  }\n  addComment(id, text) {\n    return this.http.post(`${this.apiUrl}/${id}/comment/`, {\n      text\n    });\n  }\n  /**\n   * Fetch user profile including liked images, comments, and history\n   */\n  getUserProfile() {\n    return this.http.get(`${environment.apiUrl}/users/profile/`);\n  }\n  /**\n   * Get images the current user has liked\n   */\n  getUserFavorites() {\n    return this.http.get(`${environment.apiUrl}/users/profile/`).pipe(map(resp => resp.liked_images.map(item => ({\n      id: String(item.id),\n      title: item.title,\n      url: item.url,\n      sourceUrl: item.source_url,\n      thumbnailUrl: item.thumbnail_url,\n      isTransparent: item.is_transparent,\n      copyrightStatus: item.copyright_status,\n      width: item.width,\n      height: item.height,\n      fileSize: item.file_size,\n      fileType: item.file_type,\n      createdAt: item.created_at,\n      likesCount: item.likes_count,\n      commentsCount: item.comments_count\n    }))));\n  }\n  static {\n    this.ɵfac = function ImageService_Factory(t) {\n      return new (t || ImageService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ImageService,\n      factory: ImageService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","map","environment","ImageService","constructor","http","apiUrl","getAllImages","page","limit","params","set","toString","get","pipe","resp","items","item","id","String","_id","title","url","sourceUrl","source_url","thumbnailUrl","thumbnail_url","isTransparent","is_transparent","copyrightStatus","copyright_status","width","height","fileSize","file_size","fileType","file_type","createdAt","created_at","likesCount","likes_count","commentsCount","comments_count","pagination","getImageById","comments","length","userLiked","user_liked","similarImages","similar_images","createImage","image","post","updateImage","put","deleteImage","delete","likeImage","unlikeImage","addComment","text","getUserProfile","getUserFavorites","liked_images","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\aleja\\Desktop\\BINFO\\ATA\\image-crawler\\angular-image-scraper\\src\\app\\services\\image.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\nimport { Image, PaginatedResponse } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImageService {\r\n  private apiUrl = `${environment.apiUrl}/images`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAllImages(page: number = 1, limit: number = 20): Observable<PaginatedResponse<Image>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('limit', limit.toString());\r\n    \r\n    return this.http.get<any>(this.apiUrl + '/', { params }).pipe(\r\n      map(resp => ({\r\n        items: resp.items.map((item: any) => ({\r\n          // normalize snake_case and camelCase\r\n          id: String(item.id ?? item._id),\r\n          title: item.title,\r\n          url: item.url,\r\n          sourceUrl: item.source_url ?? item.sourceUrl,\r\n          thumbnailUrl: item.thumbnail_url ?? item.thumbnailUrl,\r\n          isTransparent: item.is_transparent ?? item.isTransparent,\r\n          copyrightStatus: item.copyright_status ?? item.copyrightStatus,\r\n          width: item.width,\r\n          height: item.height,\r\n          fileSize: item.file_size ?? item.fileSize,\r\n          fileType: item.file_type ?? item.fileType,\r\n          createdAt: item.created_at ?? item.createdAt,\r\n          likesCount: item.likes_count ?? item.likesCount ?? 0,\r\n          commentsCount: item.comments_count ?? item.commentsCount ?? 0\r\n        })),\r\n        pagination: resp.pagination\r\n      }))\r\n    );\r\n  }\r\n\r\n  getImageById(id: string): Observable<Image> {\r\n    return this.http.get<any>(`${this.apiUrl}/${id}/`).pipe(\r\n      map(item => ({\r\n        id: String(item.id ?? item._id),\r\n        title: item.title,\r\n        url: item.url,\r\n        sourceUrl: item.source_url ?? item.sourceUrl,\r\n        thumbnailUrl: item.thumbnail_url ?? item.thumbnailUrl,\r\n        isTransparent: item.is_transparent ?? item.isTransparent,\r\n        copyrightStatus: item.copyright_status ?? item.copyrightStatus,\r\n        width: item.width,\r\n        height: item.height,\r\n        fileSize: item.file_size ?? item.fileSize,\r\n        fileType: item.file_type ?? item.fileType,\r\n        createdAt: item.created_at ?? item.createdAt,\r\n        likesCount: item.likes_count ?? item.likesCount ?? 0,\r\n        commentsCount: item.comments_count ?? item.commentsCount ?? (item.comments?.length ?? 0),\r\n        userLiked: item.user_liked ?? item.userLiked ?? false,\r\n        comments: item.comments || [],\r\n        similarImages: item.similar_images ?? item.similarImages ?? []\r\n      } as Image))\r\n    );\r\n  }\r\n\r\n  createImage(image: Partial<Image>): Observable<Image> {\r\n    return this.http.post<Image>(this.apiUrl, image);\r\n  }\r\n  updateImage(id: string, image: Partial<Image>): Observable<Image> {\r\n    return this.http.put<Image>(`${this.apiUrl}/${id}/`, image);\r\n  }\r\n\r\n  deleteImage(id: string): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/${id}/`);\r\n  }\r\n\r\n  likeImage(id: string): Observable<{ liked: boolean }> {\r\n    return this.http.post<{ liked: boolean }>(`${this.apiUrl}/${id}/like/`, {});\r\n  }\r\n\r\n  unlikeImage(id: string): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/${id}/like/`);\r\n  }\r\n\r\n  addComment(id: string, text: string): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/${id}/comment/`, { text });\r\n  }\r\n  /**\r\n   * Fetch user profile including liked images, comments, and history\r\n   */\r\n  getUserProfile(): Observable<{ user: any; liked_images: Image[]; comments: any[]; search_history: any[] }> {\r\n    return this.http.get<any>(`${environment.apiUrl}/users/profile/`);\r\n  }\r\n\r\n  /**\r\n   * Get images the current user has liked\r\n   */\r\n  getUserFavorites(): Observable<Image[]> {\r\n    return this.http.get<any>(`${environment.apiUrl}/users/profile/`).pipe(\r\n      map(resp => resp.liked_images.map((item: any) => ({\r\n        id: String(item.id),\r\n        title: item.title,\r\n        url: item.url,\r\n        sourceUrl: item.source_url,\r\n        thumbnailUrl: item.thumbnail_url,\r\n        isTransparent: item.is_transparent,\r\n        copyrightStatus: item.copyright_status,\r\n        width: item.width,\r\n        height: item.height,\r\n        fileSize: item.file_size,\r\n        fileType: item.file_type,\r\n        createdAt: item.created_at,\r\n        likesCount: item.likes_count,\r\n        commentsCount: item.comments_count\r\n      })))\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}