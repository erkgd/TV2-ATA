{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ImageService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/images`;\n  }\n  getAllImages(page = 1, limit = 20) {\n    const params = new HttpParams().set('page', page.toString()).set('limit', limit.toString());\n    return this.http.get(this.apiUrl, {\n      params\n    });\n  }\n  getImageById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  createImage(image) {\n    return this.http.post(this.apiUrl, image);\n  }\n  updateImage(id, image) {\n    return this.http.put(`${this.apiUrl}/${id}`, image);\n  }\n  deleteImage(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  likeImage(id) {\n    return this.http.post(`${this.apiUrl}/${id}/like`, {});\n  }\n  unlikeImage(id) {\n    return this.http.delete(`${this.apiUrl}/${id}/like`);\n  }\n  addComment(id, text) {\n    return this.http.post(`${this.apiUrl}/${id}/comment`, {\n      text\n    });\n  }\n  getUserImages() {\n    return this.http.get(`${environment.apiUrl}/users/me/images`);\n  }\n  getUserFavorites() {\n    return this.http.get(`${environment.apiUrl}/users/me/favorites`);\n  }\n  static {\n    this.ɵfac = function ImageService_Factory(t) {\n      return new (t || ImageService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ImageService,\n      factory: ImageService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","environment","ImageService","constructor","http","apiUrl","getAllImages","page","limit","params","set","toString","get","getImageById","id","createImage","image","post","updateImage","put","deleteImage","delete","likeImage","unlikeImage","addComment","text","getUserImages","getUserFavorites","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\aleja\\Desktop\\BINFO\\ATA\\image-crawler\\angular-image-scraper\\src\\app\\services\\image.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { Image, PaginatedResponse } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImageService {\r\n  private apiUrl = `${environment.apiUrl}/images`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAllImages(page: number = 1, limit: number = 20): Observable<PaginatedResponse<Image>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('limit', limit.toString());\r\n    \r\n    return this.http.get<PaginatedResponse<Image>>(this.apiUrl, { params });\r\n  }\r\n\r\n  getImageById(id: string): Observable<Image> {\r\n    return this.http.get<Image>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  createImage(image: Partial<Image>): Observable<Image> {\r\n    return this.http.post<Image>(this.apiUrl, image);\r\n  }\r\n\r\n  updateImage(id: string, image: Partial<Image>): Observable<Image> {\r\n    return this.http.put<Image>(`${this.apiUrl}/${id}`, image);\r\n  }\r\n\r\n  deleteImage(id: string): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  likeImage(id: string): Observable<{ liked: boolean }> {\r\n    return this.http.post<{ liked: boolean }>(`${this.apiUrl}/${id}/like`, {});\r\n  }\r\n\r\n  unlikeImage(id: string): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/${id}/like`);\r\n  }\r\n\r\n  addComment(id: string, text: string): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/${id}/comment`, { text });\r\n  }\r\n  \r\n  getUserImages(): Observable<Image[]> {\r\n    return this.http.get<Image[]>(`${environment.apiUrl}/users/me/images`);\r\n  }\r\n\r\n  getUserFavorites(): Observable<Image[]> {\r\n    return this.http.get<Image[]>(`${environment.apiUrl}/users/me/favorites`);\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAE7D,SAASC,WAAW,QAAQ,gCAAgC;;;AAM5D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,GAAGJ,WAAW,CAACI,MAAM,SAAS;EAEP;EAExCC,YAAYA,CAACC,IAAA,GAAe,CAAC,EAAEC,KAAA,GAAgB,EAAE;IAC/C,MAAMC,MAAM,GAAG,IAAIT,UAAU,EAAE,CAC5BU,GAAG,CAAC,MAAM,EAAEH,IAAI,CAACI,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,OAAO,EAAEF,KAAK,CAACG,QAAQ,EAAE,CAAC;IAEjC,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAA2B,IAAI,CAACP,MAAM,EAAE;MAAEI;IAAM,CAAE,CAAC;EACzE;EAEAI,YAAYA,CAACC,EAAU;IACrB,OAAO,IAAI,CAACV,IAAI,CAACQ,GAAG,CAAQ,GAAG,IAAI,CAACP,MAAM,IAAIS,EAAE,EAAE,CAAC;EACrD;EAEAC,WAAWA,CAACC,KAAqB;IAC/B,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAQ,IAAI,CAACZ,MAAM,EAAEW,KAAK,CAAC;EAClD;EAEAE,WAAWA,CAACJ,EAAU,EAAEE,KAAqB;IAC3C,OAAO,IAAI,CAACZ,IAAI,CAACe,GAAG,CAAQ,GAAG,IAAI,CAACd,MAAM,IAAIS,EAAE,EAAE,EAAEE,KAAK,CAAC;EAC5D;EAEAI,WAAWA,CAACN,EAAU;IACpB,OAAO,IAAI,CAACV,IAAI,CAACiB,MAAM,CAAC,GAAG,IAAI,CAAChB,MAAM,IAAIS,EAAE,EAAE,CAAC;EACjD;EAEAQ,SAASA,CAACR,EAAU;IAClB,OAAO,IAAI,CAACV,IAAI,CAACa,IAAI,CAAqB,GAAG,IAAI,CAACZ,MAAM,IAAIS,EAAE,OAAO,EAAE,EAAE,CAAC;EAC5E;EAEAS,WAAWA,CAACT,EAAU;IACpB,OAAO,IAAI,CAACV,IAAI,CAACiB,MAAM,CAAC,GAAG,IAAI,CAAChB,MAAM,IAAIS,EAAE,OAAO,CAAC;EACtD;EAEAU,UAAUA,CAACV,EAAU,EAAEW,IAAY;IACjC,OAAO,IAAI,CAACrB,IAAI,CAACa,IAAI,CAAC,GAAG,IAAI,CAACZ,MAAM,IAAIS,EAAE,UAAU,EAAE;MAAEW;IAAI,CAAE,CAAC;EACjE;EAEAC,aAAaA,CAAA;IACX,OAAO,IAAI,CAACtB,IAAI,CAACQ,GAAG,CAAU,GAAGX,WAAW,CAACI,MAAM,kBAAkB,CAAC;EACxE;EAEAsB,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACvB,IAAI,CAACQ,GAAG,CAAU,GAAGX,WAAW,CAACI,MAAM,qBAAqB,CAAC;EAC3E;;;uBA/CWH,YAAY,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAZ7B,YAAY;MAAA8B,OAAA,EAAZ9B,YAAY,CAAA+B,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}